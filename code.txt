<input type="checkbox" id="SelectAll"  value="ȫѡ" onclick="selectAll();"/>
function selectAll(){  
    if ($("#SelectAll").attr("checked")) {  
        $(":checkbox").attr("checked", true);  
    } else {  
        $(":checkbox").attr("checked", false);  
    }  
}

排序法        最差时间分析	平均时间复杂度	 稳定度	        空间复杂度
冒泡排序	O(n2)	        O(n2)	         稳定	        O(1)
快速排序	O(n2)	        O(n*log2n)	 不稳定	        O(log2n)~O(n)   一头一尾两个步兵  
选择排序	O(n2)		O(n2)		 稳定		O(1)            每次找最小值
二叉树排序	O(n2)		O(n*log2n)	 不一顶		O(n)
插入排序	O(n2)		O(n2)		 稳定		O(1)   插入排序比较适合用于“少量元素的数组”。
堆排序		O(n*log2n)	O(n*log2n)	 不稳定		O(1)
希尔排序	O		O		不稳定		O(1)
=========================================================================
结点的度：结点拥有的子树数。(每个结点有多少个分支)
叶子结点：度为零的结点。(没有分支的结点)
树的度  ：树内各结点的度的最大值。
树的性质知：结点数为所有结点的度数之和加1 
=========================================================================
子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络。
最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND(&)运算后，如果得出的结果是相同的，
则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯，So Easy.

1. A类地址 
⑴ A类地址第1字节为网络地址，其它3个字节为主机地址。另外第1个字节的最高位固定为0。 
⑵ A类地址范围：1.0.0.1到126.155.255.254。 
⑶ A类地址中的私有地址和保留地址： 
①10.0.0.0到10.255.255.255是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。 
② 127.0.0.0到127.255.255.255是保留地址，用做循环测试用的。 

2. B类地址 
⑴ B类地址第1字节和第2字节为网络地址，其它2个字节为主机地址。另外第1个字节的前两位固定为10。 
⑵ B类地址范围：128.0.0.1到191.255.255.254。 
⑶ B类地址的私有地址和保留地址 
① 172.16.0.0到172.31.255.255是私有地址 
②169.254.0.0到169.254.255.255是保留地址。如果你的ip地址是自动获取ip地址，而你在网络上又没有找到可用的DHCP服务器，这时你将会从169.254.0.0到169.254.255.255中临得获得一个ip地址。 

3. C类地址 
⑴C类地址第1字节、第2字节和第3个字节为网络地址，第4个个字节为主机地址。另外第1个字节的前三位固定为110。 
⑵ C类地址范围：192.0.0.1到223.255.255.254。 
⑶ C类地址中的私有地址：192.168.0.0到192.168.255.255是私有地址。 

4. D类地址 
⑴ D类地址不分网络地址和主机地址，它的第1个字节的前四位固定为1110。 
⑵ D类地址范围：224.0.0.1到239.255.255.254 

5. E类地址 
⑴ E类地址也不分网络地址和主机地址，它的第1个字节的前五位固定为11110。 
⑵ E类地址范围：240.0.0.1到255.255.255.254 
A类地址默认子网掩码为255.0.0.0 
B类地址默认子网掩码为255.255.0.0 
C类地址默认子网掩码为255.255.255.0 
了解了上面这些内容就可以解释同一网段这一概念了 
将ip地址和子网掩码都转换为二进制，进行按位的and运算，如果多个IP地址与同一子网掩码运算后得到的结果是相同的，则称为在同一网段 

51 、私有地址？   
答： A 类： 10.0.0 .0 —— 10.255.255.255 
     B 类： 172.16.0.0 —— 172.31.255.255  
     C 类： 192.168.0.0 —— 192.168.255.255
==========================================================================================================================
常见的算法时间复杂度由小到大依次为：
Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)

Ο(1)表示基本语句的执行次数是一个常数，一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。
Ο(log2n)、Ο(n)、Ο(nlog2n)、Ο(n^2)和Ο(n^3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者是有效算法，把这类问题称为P类问题，而把后者称为NP问题。
======================================================================================================
二分查找(又称折半查找)
intbsearchWithoutRecursion(intarray[],int low,int high,int target)
{
while(low<=high)
{
	int mid=(low+high)/2;
	if(array[mid]>target)
	  high=mid-1;
	else if(array[mid]<target)
	   low=mid+1;
	else //find thet arget
	  return mid;
}
//the array does not contain the target
return -1;
}
========================================================================================================
javascript有几种数据类型：Number数值类型、String字符串类型、Boolean 布尔类型、Null、Undefined、Object 对象
maxLength="12" onKeypress="if (event.keyCode < 48 || event.keyCode > 57) event.returnValue = false;"
===========================================================================================================
　2，如何解决跨域通信的问题，简述有哪些方法？
　　大概有以下几种，平时较常用的就是jsonp，这个也是面试问的比较多的地方，大家一定要弄清楚其中的原理，最好能手写，基本每次的面试都会问。
　　（1）、document.domain+iframe
　　（2）、动态创建script，就是我们通常说的jsonp
　　（3）、利用iframe和location.hash
　　（4）、window.name实现的跨域数据传输
　　（5）、使用HTML5 postMessage
　　（6）、利用flash
=========================================================================================================
Dreamweaver8 序列号： WPD800-59931-56632-71626 
=====================================================================================================
抽象类与接口的区别
1.abstract class 在 Java 语言中表示的是一种继承关系，一个类只能使用一次继承关系。但是，一个类却可以实现多个interface。

2.在abstract class 中可以有自己的数据成员，也可以有非abstarct的成员方法，而在interface中，只能够有静态的不能被修改的数据成员（也就是必须是static final的，不过在 interface中一般不定义数据成员），所有的成员方法都是abstract的。

3.abstract class和interface所反映出的设计理念不同。其实abstract class表示的是"is-a"关系，interface表示的是"like-a"关系。 

4.实现抽象类和接口的类必须实现其中的所有方法。抽象类中可以有非抽象方法。接口中则不能有实现方法。

5.接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值。

6.抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。 

7.接口中的方法默认都是 public,abstract 类型的。
=============================================================================================================
 int  N=2015,count=0 ;while(N){count++;N=N&(N-1);}  *****用来统计N的二进制表示中有多少个1*****
==============================================================================================================
定义　　*进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。
　　    *线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。
　　进程和线程的关系：
　　(1)一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。
　　(2)资源分配给进程，同一进程的所有线程共享该进程的所有资源。
　　(3)处理机分给线程，即真正在处理机上运行的是线程。
　　(4)线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。
　　进程与线程的区别:
　　(1)调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位
　　(2)并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行
　　(3)拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.
　　(4) 系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。
    但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些
　　结论：
　　(1)线程是进程的一部分
　　(2)CPU调度的是线程
　　(3)系统为进程分配资源，不对线程分配资源

    线程只有 3 个基本状态：就绪，执行，阻塞。

    线程存在 5 种基本操作来切换线程的状态：派生，阻塞，激活，调度，结束。
=================================================================================================================
不同部分协同工作就会产生依赖，一个方法调用另一个方法，一个对象包含另一个对象 
如果对象A包含对象B的话，就需要在A里new一个B 
依赖注入从具体类B里抽象出接口IB——IB的具体实现可能有很多B,B1,B2...很多种,这样A可以不用再new具体的B了，而是跟IoC容器说：我要一个IB（getBean("IB")）。然后，由容器根据配置文件来做具体的new的工作。具体new的是哪个，由配置文件从代码外部决定，要更换成B,B1,或是B2...修改配置文件就能做到，不用再改代码了。
这样的好处就是可以达到对象与对象的松耦合，这样维护，更新修改都很方便了，而且不容易出现牵一发而动全身的崩溃噩梦出现。
====================================================================================================================
按中文姓氏的首字母排序(英文名直接 Arrays.sort(a,0,a.lenth);)
	public static void main(String args[]) {
	        Comparator comparator = Collator.getInstance(java.util.Locale.CHINA);
	        String[] a1 = {"保定","何子安","于小云","刘帝","刘何保定子安","刘","刘娜","家强"}; 
	        Arrays.sort(a1, comparator);
	        System.out.println("");
	        System.out.print("排序后:");
	        for (int i = 0; i < a1.length; i++) {
	            System.out.print(a1[i]+" ");
	        }
	}

其中使用Struts作为系统的整体基础架构，负责MVC的分离，在Struts框架的模型部分控制业务跳转;利用Hibernate框架对持久层提供支持，来实现Java类与数据库之间的转换和访问。Spring做管理，管理struts和hibernate，将其整合。
=======================================================================================================================
GET 还是 POST？
与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
然而，在以下情况中，请使用 POST 请求：
无法使用缓存文件（更新服务器上的文件或数据库）
向服务器发送大量数据（POST 没有数据量限制）
发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
========================================================================================================================
当两个行内元素紧邻的时候(例如span),他们之间的距离为第一个元素的margin-right加上第2个元素的margin-left
当两个块级元素紧邻的时候(例如div),他们之间的距离为第两个元素margin中的最大的那个
!important是CSS就定义的语法，作用是提高指定样式规则的应用优先权。
div{ color:red;color:blue!important;}  所有的浏览器均显示蓝色文字[正常情况下我们这样写]
Zoom 标签是css3里边用来定义缩放比例，区分块级元素和行内元素。
CSS3  2D 转换方法：
translate()：元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标）
rotate()：元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。
scale()：元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）
skew():元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）
matrix()：把所有 2D 转换方法组合在一起
========================================================
CSS3 3D 转换方法：rotateX()和rotateY()
=====================================================
CSS3 过渡
应用于宽度属性的过渡效果，时长为 2 秒：
div
{
width:100px;
height:100px;
background:yellow;      //简写方式 transition: width 1s linear 2s; 
transition: width 2s;
-moz-transition: width 2s;	/* Firefox 4 */
-webkit-transition: width 2s;	/* Safari 和 Chrome */
-o-transition: width 2s;	/* Opera */
}
div:hover
{
width:300px;
}
========================================================================================================================
document.getElementById("demo").innerHTML="My First JavaScript";
document.write("<p>My First JavaScript</p>");
JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。
当您声明新变量时，可以使用关键词 "new" 来声明其类型：
var carname=new String;
var x=      new Number;
var y=      new Boolean;
var cars=   new Array;
var person= new Object;
在代数中，我们使用字母（比如 x）来保存值（比如 2）。
通过上面的表达式 z=x+y，我们能够计算出 z 的值为 5。
在 JavaScript 中，这些字母被称为变量。
提示：您可以把变量看做存储数据的容器。
var y=123e5;      // 12300000
var z=123e-5;     // 0.00123
//数组的声明
var cars=new Array();
cars[0]="Audi";
cars[1]="BMW";
cars[2]="Volvo";
//方法2
var cars=new Array("Audi","BMW","Volvo");
//方法3
var cars=["Audi","BMW","Volvo"];

//对象的声明
var person={firstname:"Bill", lastname:"Gates", id:5566};
或
var person={
firstname : "Bill",
lastname  : "Gates",
id        :  5566
};
或
person=new Object();
person.firstname="Bill";
person.lastname="Gates";
person.age=56;
person.eyecolor="blue";
两种寻址方式：name=person.lastname;
	      name=person["lastname"];

即使不把它保存为变量，您也可以使用返回值：
document.getElementById("demo").innerHTML=myFunction();
===================================================================================
2 javascript的方法可以分为三类：
function People(name)
{
  this.name=name;
  //对象方法
  this.Introduce=function(){
    alert("My name is "+this.name);
  }
}
//类方法
People.Run=function(){
  alert("I can run");
}
//原型方法
People.prototype.IntroduceChinese=function(){
  alert("我的名字是"+this.name);
}
===============================================
function baseClass()
{
  this.showMsg = function()
  {
     alert("baseClass::showMsg");   
  }
}

function extendClass()
{
}

extendClass.prototype = new baseClass();
var instance = new extendClass();
instance.showMsg();   // 显示baseClass::showMsg
我们首先定义了baseClass类，然后我们要定义extentClass，
但是我们打算以baseClass的一个实例为原型，来克隆的extendClass也同时包含showMsg这个对象方法。
extendClass.prototype = new baseClass()就可以阅读为：extendClass是以baseClass的一个实例为原型克隆创建的。

实验证明：函数运行时会先去本体的函数中去找，如果找到则运行，找不到则去prototype中寻找函数。或者可以理解为prototype不会克隆同名函数。
================================================
如果我想使用extendClass的一个实例instance调用baseClass的对象方法showMsg怎么办？
答案是可以使用call:

extendClass.prototype = new baseClass();
var instance = new extendClass();

var baseinstance = new baseClass();
baseinstance.showMsg.call(instance);//显示baseClass::showMsg
===================================================================================
过滤器是web中的概念，可以过滤一切对象（包括action/servlet/jsp/html等）
拦截器是struts2中的概念，只能拦截action（无法拦截对jsp的请求）

1、选择A3整行,按CTRL+SHIFT+↓ 
2、然后CTRL+小键盘减号
3、然后CTRL+S 
=======================================================
(byte 8/1，short16/2，char16/2)--int32/4--float32/4--long64/8--double64/8

========================================================
但是, 两者之间最主要的不同有两点.
1.     hashMap的读写是unsynchronized, 在多线程的环境中要注意使用
而hashtable是synchronized
这两者的不同是通过在读写方法上加synchronized关键字来实现的.

第二个不同是hashMap可以放空值, 而hashtable就会报错.
HashMap实现同步的方法：调用Collections的静态方法Collections.synchronizedMap(Map map);，返回一个同步的Map，这个Map封装了底层的HashMap的所有方法，使得底层的HashMap即使是在多线程的环境中也是安全的。
 
同时说一下，ArrayList和HashSet，他们也都不是同步的，都是线程不安全的，对其实现同步的方式和HashMap的方式相同，都允许使用null元素，ArrayList分配的初始空间为10，HashSet分配的初始空间为16
===========================================================
P协议(Internet?Protocol)又称互联网协议，是支持网间互连的数据报协议，它与TCP协议（传输控制协议）一起构成了TCP/IP协议族的核心。?

它提供网间连接的完善功能，?包括IP数据报规定互连网络范围内的IP地址格式。
IP是网络层协议，工作在数据链路层的上面。?

IP协议的作用就是向传输层（TCP层）提供统一的IP包，即将各种不同类型的MAC帧转换为统一的IP包，并将MAC帧的物理地址变换为全网统一的逻辑地址（IP地址）。?
这样，这些不同物理网络MAC帧的差异对上层而言就不复存在了。正因为这一转换，才实现了不同类型物理网络的互联。TCP和UDP都是传输层协议.?

TCP（Transmission?Control?Protocol，传输控制协议）是面向连接的协议,在收发数据前，必须和对方建立连接。
?









UDP（User?Data?Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去
============================================================
　17、什么是死锁？其条件是什么？怎样避免死锁？

　　所谓死锁：是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，
	      若无外力作用，它们都将无法推进下去。

　　死锁产生的原因主要是：？ 系统资源不足；？ 进程推进顺序非法。

　　产生死锁的必要条件：

　　（1）互斥（mutualexclusion），一个资源每次只能被一个进程使用；

　　（2）不可抢占（nopreemption），进程已获得的资源，在未使用完之前，不能强行剥夺；

　　（3）占有并等待（hold andwait），一个进程因请求资源而阻塞时，对已获得的资源保持不放；

　　（4）环形等待（circularwait），若干进程之间形成一种首尾相接的循环等待资源关系。

　　这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。
==================================================================
高级通信机制可归结为三大类：

　　（1）共享存储器系统（存储器中划分的共享存储区）；实际操作中对应的是“剪贴板”（剪贴板实际上是系统维护管理的一块内存区域）的通信方式，
	比如举例如下：word进程按下ctrl+c，在ppt进程按下ctrl+v，即完成了word进程和ppt进程之间的通信，复制时将数据放入到剪贴板，粘贴时从剪贴板中取出数据，然后显示在ppt窗口上。

　　（2）消息传递系统（进程间的数据交换以消息（message）为单位，当今最流行的微内核操作系统中，微内核与服务器之间的通信，无一例外地都采用了消息传递机制。
	应用举例：邮槽（MailSlot）是基于广播通信体系设计出来的，它采用无连接的不可靠的数据传输。邮槽是一种单向通信机制，创建邮槽的服务器进程读取数据，打开邮槽的客户机进程写入数据。

　　（3）管道通信系统（管道即：连接读写进程以实现他们之间通信的共享文件（pipe文件，类似先进先出的队列，由一个进程写，另一进程读））。
	实际操作中，管道分为：匿名管道、命名管道。匿名管道是一个未命名的、单向管道，通过父进程和一个子进程之间传输数据。匿名管道只能实现本地机器上两个进程之间的通信，而不能实现跨网络的通信。命名管道不仅可以在本机上实现两个进程间的通信，还可以跨网络实现两个进程间的通信。
==================================================================
　【FAT】：

　　常PC机使用的文件系统是FAT16。
　【NTFS】：

　　NTFS文件系统是一个基于安全性的文件系统，是Windows NT所采用的独特的文件系统结构，它是建立在保护文件和目录数据基础上，同时照顾节省存储资源、减少磁盘占用量的一种先进的文件系统。
  【Ext2】：

　　Ext2是 GNU/Linux 系统中标准的文件系统，其特点为存取文件的性能极好，对于中小型的文件更显示出优势，这主要得利于其簇快取层的优良设计。
  【Ext3】：

　　Ext3是一种日志式文件系统，是对ext2系统的扩展，它兼容ext2。
  【ZFS】：

　　ZFS源自于Sun Microsystems为Solaris操作系统开发的文件系统。

  【HFS】：分层文件系统（Hierarchical File System，HFS）

　　1、HFS文件系统概念

　　分层文件系统（Hierarchical File System，HFS）是一种由苹果电脑开发，并使用在Mac OS上的文件系统。
====================================================================
ASCALL 码： 48  对应 0，  65对应 A  , 97 对应 a

